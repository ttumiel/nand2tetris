// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int screenBase, pixelX, pixelY;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let pixelX = 512;
        let pixelY = 256;
        let screenBase = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int count, pixelCount;

        let pixelCount = pixelX*pixelY+screenBase;
        let count = screenBase;
        while (count < pixelCount){
            do Memory.poke(count, 0);
            let count = count + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, val, i, r;

        let i = x/16;
        let r = x-(i*16);
        let addr = screenBase+(32*y)+i;
        let val = Memory.peek(addr);
        let val = Math.setBit(val, r, color);
        do Memory.poke(addr, val);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy;
        var boolean dxSign, dySign;

        if (y1 = y2){
            if (x1>x2){
                let dx = x2;
                let x2 = x1;
                let x1 = dx;
            }

            let dx = x2-x1;
            let a = 0;
            while (~(a>dx)){
                do Screen.drawPixel(x1+a, y1);
                let a = a + 1;
            }
            return;
        }

        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2-x1;
        let dy = y2-y1;
        let dxSign = dx>0;
        let dySign = dy>0;
        let dx = Math.abs(dx);
        let dy = Math.abs(dy);

        while (~(a>dx) & (~(b>dy))){
            if (dySign){
                if (dxSign){
                    do Screen.drawPixel(x1+a, y1+b);
                } else {
                    do Screen.drawPixel(x1-a, y1+b);
                }
            } else {
                if (dxSign){
                    do Screen.drawPixel(x1+a, y1-b);
                } else {
                    do Screen.drawPixel(x1-a, y1-b);
                }
            }
            if (diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x;

        let x = x1;
        while (x<x2){
            do Screen.drawLine(x, y1, x, y2);
            let x = x + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, w;
        if (r>181){ let r = 181; }

        let dy = -r;
        while (dy<r){
            let w = Math.sqrt((r*r)-(dy*dy));
            do Screen.drawLine(x-w, y+dy, x+w, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}

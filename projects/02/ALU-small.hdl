// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zero x
    Not(in=zx, out=notzx);
    And16(a=x, b[0]=notzx,
               b[1]=notzx,
               b[2]=notzx,
               b[3]=notzx,
               b[4]=notzx,
               b[5]=notzx,
               b[6]=notzx,
               b[7]=notzx,
               b[8]=notzx,
               b[9]=notzx,
               b[10]=notzx,
               b[11]=notzx,
               b[12]=notzx,
               b[13]=notzx,
               b[14]=notzx,
               b[15]=notzx, out=x1);

    // Not x
    Xor16(a=x1, b[0]=nx,
                b[1]=nx,
                b[2]=nx,
                b[3]=nx,
                b[4]=nx,
                b[5]=nx,
                b[6]=nx,
                b[7]=nx,
                b[8]=nx,
                b[9]=nx,
                b[10]=nx,
                b[11]=nx,
                b[12]=nx,
                b[13]=nx,
                b[14]=nx,
                b[15]=nx, out=x2);

    // Zero y
    Not(in=zy, out=notzy);
    And16(a=y, b[0]=notzy,
               b[1]=notzy,
               b[2]=notzy,
               b[3]=notzy,
               b[4]=notzy,
               b[5]=notzy,
               b[6]=notzy,
               b[7]=notzy,
               b[8]=notzy,
               b[9]=notzy,
               b[10]=notzy,
               b[11]=notzy,
               b[12]=notzy,
               b[13]=notzy,
               b[14]=notzy,
               b[15]=notzy, out=y1);

    // Not y
    Xor16(a=y1, b[0]=ny,
                b[1]=ny,
                b[2]=ny,
                b[3]=ny,
                b[4]=ny,
                b[5]=ny,
                b[6]=ny,
                b[7]=ny,
                b[8]=ny,
                b[9]=ny,
                b[10]=ny,
                b[11]=ny,
                b[12]=ny,
                b[13]=ny,
                b[14]=ny,
                b[15]=ny, out=y2);

    // Function selection
    Add16(a=x2, b=y2, out=f1);
    And16(a=x2, b=y2, out=f2);

    Mux16(a=f2, b=f1, sel=f, out=fout);

    // Negate output
    Xor16(a=fout, b[0]=no,
                b[1]=no,
                b[2]=no,
                b[3]=no,
                b[4]=no,
                b[5]=no,
                b[6]=no,
                b[7]=no,
                b[8]=no,
                b[9]=no,
                b[10]=no,
                b[11]=no,
                b[12]=no,
                b[13]=no,
                b[14]=no,
                b[15]=no, out=tmp);

    // Identity block because of limitations of feeding the output
    // to the zero and negative checks
    Not16(in=tmp, out=ntmp);
    Not16(in=ntmp, out=out);

    // Set zero bit
    Any16(a=tmp, out=anyOnes);
    Not(in=anyOnes, out=zr);

    // Set negative bit
    IsNeg16(in=tmp, out=ng);
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=loadA);

    // Select whether to write to A ((instruction[5] & instruction[15]) or loadA) == instruction[5] or loadA
    Or(a=instruction[5], b=loadA, out=writeA);
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=inA); // select input to A register (instruction or aluOut)
    ARegister(in=inA, load=writeA, out=outA); // A register

    And(a=instruction[4], b=instruction[15], out=writeD);
    DRegister(in=aluOut, load=writeD, out=outD); // D register

    Mux16(a=outA, b=inM, sel=instruction[12], out=aluInY);

    ALU(x=outD, y=aluInY, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut,
        zr=aluZero, ng=aluNeg);

    // Check branches
    Or(a=aluZero, b=aluNeg, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=greater);
    And(a=greater, b=instruction[0], out=jumpIfGreater);
    And(a=aluZero, b=instruction[1], out=jumpIfEqual);
    And(a=aluNeg, b=instruction[2], out=jumpIfLess);

    Or(a=jumpIfEqual, b=jumpIfGreater, out=jump1);
    Or(a=jump1, b=jumpIfLess, out=jump);

    And(a=instruction[15], b=jump, out=branchPC);// if branching and instruction[15]
    Mux16(a=outA, b=false, sel=reset, out=pcResetOrJump);
    PC(in=pcResetOrJump, load=branchPC, inc=true, reset=reset, out[0..14]=pc); // load PC when reset or when jump

    // Write M
    And(a=instruction[3], b=instruction[15], out=writeM);
    Not16(in=aluOut, out=notAluOut);
    Not16(in=notAluOut, out=outM);
    Not16(in=outA, out=notOutA);
    Not16(in=notOutA, out[0..14]=addressM);

}
